{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Shourya/Bootcamp/bootcamp-2021d/src/notifications.tsx\";\n\nimport React from 'react';\nimport color from 'color';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useTheme } from 'react-native-paper';\nimport { TabView, SceneMap, TabBar } from 'react-native-tab-view';\nimport overlay from \"./overlay\";\nimport { Feed } from \"./feed\";\nimport { AllNotifications } from \"./all\";\nvar initialLayout = {\n  width: Dimensions.get('window').width\n};\n\nvar All = function All() {\n  return React.createElement(AllNotifications, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 19\n    }\n  });\n};\n\nvar Mentions = function Mentions() {\n  return React.createElement(Feed, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 24\n    }\n  });\n};\n\nexport var Friends = function Friends() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      index = _React$useState2[0],\n      setIndex = _React$useState2[1];\n\n  var _React$useState3 = React.useState([{\n    key: 'all',\n    title: 'All'\n  }, {\n    key: 'mentions',\n    title: 'Mentions'\n  }]),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      routes = _React$useState4[0];\n\n  var theme = useTheme();\n  var renderScene = SceneMap({\n    all: All,\n    mentions: Mentions\n  });\n  var tabBarColor = theme.dark ? overlay(4, theme.colors.surface) : theme.colors.surface;\n  var rippleColor = theme.dark ? color(tabBarColor).lighten(0.5) : color(tabBarColor).darken(0.2);\n\n  var renderTabBar = function renderTabBar(props) {\n    return React.createElement(TabBar, _extends({}, props, {\n      indicatorStyle: {\n        backgroundColor: theme.colors.primary\n      },\n      style: {\n        backgroundColor: tabBarColor,\n        shadowColor: theme.colors.text\n      },\n      labelStyle: {\n        color: theme.colors.primary\n      },\n      pressColor: rippleColor,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }\n    }));\n  };\n\n  return React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(TabView, {\n    navigationState: {\n      index: index,\n      routes: routes\n    },\n    renderScene: renderScene,\n    onIndexChange: setIndex,\n    initialLayout: initialLayout,\n    renderTabBar: renderTabBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/Shourya/Bootcamp/bootcamp-2021d/src/notifications.tsx"],"names":["React","color","useTheme","TabView","SceneMap","TabBar","overlay","Feed","AllNotifications","initialLayout","width","Dimensions","get","All","Mentions","Friends","useState","index","setIndex","key","title","routes","theme","renderScene","all","mentions","tabBarColor","dark","colors","surface","rippleColor","lighten","darken","renderTabBar","props","backgroundColor","primary","shadowColor","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { Dimensions } from 'react-native';\nimport { useTheme } from 'react-native-paper';\nimport { TabView, SceneMap, TabBar } from 'react-native-tab-view';\n\nimport overlay from './overlay';\nimport { Feed } from './feed';\nimport { AllNotifications } from './all';\n\nconst initialLayout = { width: Dimensions.get('window').width };\n\nconst All = () => <AllNotifications />;\n\nconst Mentions = () => <Feed />;\n\nexport const Friends = () => {\n  const [index, setIndex] = React.useState(0);\n  const [routes] = React.useState([\n    { key: 'all', title: 'All' },\n    { key: 'mentions', title: 'Mentions' },\n  ]);\n\n  const theme = useTheme();\n\n  const renderScene = SceneMap({\n    all: All,\n    mentions: Mentions,\n  });\n\n  const tabBarColor = theme.dark\n    ? (overlay(4, theme.colors.surface) as string)\n    : theme.colors.surface;\n\n  const rippleColor = theme.dark\n    ? color(tabBarColor).lighten(0.5)\n    : color(tabBarColor).darken(0.2);\n\n  const renderTabBar = props => (\n    <TabBar\n      {...props}\n      indicatorStyle={{ backgroundColor: theme.colors.primary }}\n      style={{ backgroundColor: tabBarColor, shadowColor: theme.colors.text }}\n      labelStyle={{ color: theme.colors.primary }}\n      pressColor={rippleColor}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      <TabView\n        navigationState={{ index, routes }}\n        renderScene={renderScene}\n        onIndexChange={setIndex}\n        initialLayout={initialLayout}\n        renderTabBar={renderTabBar}\n      />\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}